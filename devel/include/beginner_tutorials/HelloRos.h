// Generated by gencpp from file beginner_tutorials/HelloRos.msg
// DO NOT EDIT!


#ifndef BEGINNER_TUTORIALS_MESSAGE_HELLOROS_H
#define BEGINNER_TUTORIALS_MESSAGE_HELLOROS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace beginner_tutorials
{
template <class ContainerAllocator>
struct HelloRos_
{
  typedef HelloRos_<ContainerAllocator> Type;

  HelloRos_()
    : Ros()
    , age(0)
    , name()  {
    }
  HelloRos_(const ContainerAllocator& _alloc)
    : Ros(_alloc)
    , age(0)
    , name(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _Ros_type;
  _Ros_type Ros;

   typedef int64_t _age_type;
  _age_type age;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _name_type;
  _name_type name;





  typedef boost::shared_ptr< ::beginner_tutorials::HelloRos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::beginner_tutorials::HelloRos_<ContainerAllocator> const> ConstPtr;

}; // struct HelloRos_

typedef ::beginner_tutorials::HelloRos_<std::allocator<void> > HelloRos;

typedef boost::shared_ptr< ::beginner_tutorials::HelloRos > HelloRosPtr;
typedef boost::shared_ptr< ::beginner_tutorials::HelloRos const> HelloRosConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::beginner_tutorials::HelloRos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::beginner_tutorials::HelloRos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::beginner_tutorials::HelloRos_<ContainerAllocator1> & lhs, const ::beginner_tutorials::HelloRos_<ContainerAllocator2> & rhs)
{
  return lhs.Ros == rhs.Ros &&
    lhs.age == rhs.age &&
    lhs.name == rhs.name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::beginner_tutorials::HelloRos_<ContainerAllocator1> & lhs, const ::beginner_tutorials::HelloRos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace beginner_tutorials

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::HelloRos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::beginner_tutorials::HelloRos_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::HelloRos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::beginner_tutorials::HelloRos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::HelloRos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::beginner_tutorials::HelloRos_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::beginner_tutorials::HelloRos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a040e6b50aa4df62e27b13e9b8f055f4";
  }

  static const char* value(const ::beginner_tutorials::HelloRos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa040e6b50aa4df62ULL;
  static const uint64_t static_value2 = 0xe27b13e9b8f055f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::beginner_tutorials::HelloRos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "beginner_tutorials/HelloRos";
  }

  static const char* value(const ::beginner_tutorials::HelloRos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::beginner_tutorials::HelloRos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#ROS Mesages\n"
"string Ros\n"
"int64 age\n"
"string name\n"
;
  }

  static const char* value(const ::beginner_tutorials::HelloRos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::beginner_tutorials::HelloRos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Ros);
      stream.next(m.age);
      stream.next(m.name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HelloRos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::beginner_tutorials::HelloRos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::beginner_tutorials::HelloRos_<ContainerAllocator>& v)
  {
    s << indent << "Ros: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.Ros);
    s << indent << "age: ";
    Printer<int64_t>::stream(s, indent + "  ", v.age);
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEGINNER_TUTORIALS_MESSAGE_HELLOROS_H
